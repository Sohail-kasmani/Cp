class Solution {
public:
    int minimumTime(vector<vector<int>>& grid) {
        if(grid[0][1]>1 && grid[1][0]>1) return -1;
        vector<vector<int>> v={{0,1},{0,-1},{-1,0},{1,0}};
        set<vector<int>> q;
        vector<vector<int>> dist(grid.size(),vector<int>(grid[0].size(),INT_MAX));
        dist[0][0]=0;
        q.insert({0,0,0});
        while(q.size()>0){
            auto a=*q.begin();
            q.erase(q.begin());
            for(auto &x:v){
                int i=a[1]+x[0];
                int j=a[2]+x[1];
                if(i<grid.size() && i>=0 && j>=0 && j<grid[0].size()){
                    int flag=0;
                    int time=0;
                    if(grid[i][j]<=a[0]+1) time=a[0]+1;
                    else{
                        if((grid[i][j]-a[0])%2==0){
                            flag=1;
                        } 
                        time=grid[i][j];
                        
                    }
                    if(dist[i][j]>flag+time){
                        if(q.find({dist[i][j],i,j})!=q.end()){
                            q.erase({dist[i][j],i,j});
                        }
                        dist[i][j]=flag+time;
                        q.insert({dist[i][j],i,j});
                    }
                    // cout<<time<<endl;
                }
            }
        }
        return dist[grid.size()-1][grid[0].size()-1];
    }
};
